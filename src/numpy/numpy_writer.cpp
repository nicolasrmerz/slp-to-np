#include "numpy/numpy_writer.h"
#include <iostream>
#include <fstream>
#include <cstdint>

static constexpr uint8_t header_prefix[] = {0x93, 0x4E, 0x55, 0x4D, 0x50, 0x59, 0x01, 0x00, 0x76, 0x00, 0x7B, 0x27, 0x64, 0x65, 0x73, 0x63, 0x72, 0x27, 0x3A, 0x20, 0x27};
static const char* type_strings[] = {"u1", "u2", "u4", "i1", "i2", "i4", "f4", "f8"};
static constexpr uint8_t header_suffix[] = {0x27, 0x2C, 0x20, 0x27, 0x66, 0x6F, 0x72, 0x74, 0x72, 0x61, 0x6E, 0x5F, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x27, 0x3A, 0x20, 0x46, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x20, 0x27, 0x73, 0x68, 0x61, 0x70, 0x65, 0x27, 0x3A, 0x20, 0x28, 0x30, 0x2C, 0x20, 0x30, 0x29, 0x2C, 0x20, 0x7D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A};

void SLPToNP::NumpyWriter::writeHeader(const char* filename, NumpyType numpyType) {
  std::ofstream fout;
  fout.open(filename, std::ios::binary);
  fout.write((char*) header_prefix, sizeof(header_prefix));
  if (numpyType == U8 || numpyType == I8) {
    fout.write("|", 1);
  } else {
    fout.write(">", 1); // hard-coded big endian for now
  }
  fout.write(type_strings[numpyType], 2);

  fout.write((char*) header_suffix, sizeof(header_suffix));

  fout.close();
}
